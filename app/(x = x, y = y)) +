simplicial-complex            package:ggtda            R Documentation

_D_i_s_k_s _a_b_o_u_t _d_a_t_a _p_o_i_n_t_s _a_n_d _s_k_e_l_e_t_o_n_s _o_f _V_i_e_t_o_r_i_s _a_n_d _Č_e_c_h _c_o_m_p_l_e_x_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     Annotate 2-dimensional point clouds with TDA constructions.

_U_s_a_g_e:

     stat_disk(
       mapping = NULL,
       data = NULL,
       geom = "face",
       position = "identity",
       na.rm = FALSE,
       radius = NULL,
       diameter = NULL,
       segments = 60,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_vietoris0(
       mapping = NULL,
       data = NULL,
       geom = "point",
       position = "identity",
       na.rm = FALSE,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_vietoris1(
       mapping = NULL,
       data = NULL,
       geom = "segment",
       position = "identity",
       na.rm = FALSE,
       radius = NULL,
       diameter = NULL,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_vietoris2(
       mapping = NULL,
       data = NULL,
       geom = "face",
       position = "identity",
       na.rm = FALSE,
       radius = NULL,
       diameter = NULL,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_cech0(
       mapping = NULL,
       data = NULL,
       geom = "point",
       position = "identity",
       na.rm = FALSE,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_cech1(
       mapping = NULL,
       data = NULL,
       geom = "segment",
       position = "identity",
       na.rm = FALSE,
       radius = NULL,
       diameter = NULL,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     stat_cech2(
       mapping = NULL,
       data = NULL,
       geom = "face",
       position = "identity",
       na.rm = FALSE,
       radius = NULL,
       diameter = NULL,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
     geom_face(
       mapping = NULL,
       data = NULL,
       stat = "identity",
       position = "identity",
       na.rm = FALSE,
       show.legend = NA,
       inherit.aes = TRUE,
       ...
     )
     
_A_r_g_u_m_e_n_t_s:

 mapping: Set of aesthetic mappings created by ‘aes()’ or ‘aes_()’. If
          specified and ‘inherit.aes = TRUE’ (the default), it is
          combined with the default mapping at the top level of the
          plot. You must supply ‘mapping’ if there is no plot mapping.

    data: The data to be displayed in this layer. There are three
          options:

          If ‘NULL’, the default, the data is inherited from the plot
          data as specified in the call to ‘ggplot()’.

          A ‘data.frame’, or other object, will override the plot data.
          All objects will be fortified to produce a data frame. See
          ‘fortify()’ for which variables will be created.

          A ‘function’ will be called with a single argument, the plot
          data. The return value must be a ‘data.frame’, and will be
          used as the layer data. A ‘function’ can be created from a
          ‘formula’ (e.g. ‘~ head(.x, 10)’).

    geom: The geometric object to use display the data; defaults to
          ‘segment’ in ‘stat_vietoris1()’ and to ‘face’ in
          ‘stat_vietoris2’. Pass a string to override the default.

position: Position adjustment, either as a string, or the result of a
          call to a position adjustment function.

   na.rm: Logical; ignored.

  radius: A positive number; the radius of the disk to render around
          each point or to determine simplices from a point cloud.

diameter: A positive number; the diameter of the disk to render around
          each point or to determine simplices from a point cloud.

segments: The number of segments to be used in drawing each disk.

show.legend: logical. Should this layer be included in the legends?
          ‘NA’, the default, includes if any aesthetics are mapped.
          ‘FALSE’ never includes, and ‘TRUE’ always includes. It can
          also be a named logical vector to finely select the
          aesthetics to display.

inherit.aes: If ‘FALSE’, overrides the default aesthetics, rather than
          combining with them. This is most useful for helper functions
          that define both data and aesthetics and shouldn't inherit
          behaviour from the default plot specification, e.g.
          ‘borders()’.

     ...: Additional arguments passed to ‘ggplot2::layer()’.

    stat: The statistical transformation to use on the data for this
          layer, as a string.

_D_e_t_a_i_l_s:

     These plot layers are useful for exposition and education; they
     illustrate constructions used by TDA methods but cannot be
     pipelined into those methods.

_D_e_f_i_n_i_t_i_o_n_s:

     A _ball_ of radius r around a point x in Euclidean space consists
     of all points whose distances from x are less than r.

     The _Vietoris complex_ of a point cloud is a simplicial complex
     consisting of a simplex for each subset of points within a fixed
     diameter of each other. The _Čech complex_ consists of a simplex
     for each subset that lies within a circle of fixed diameter. (This
     means that the Čech complex depends on the geometry of the ambient
     space containing the point cloud, while the Vietoris complex
     depends only on the inter-point distances.)

     The _0-skeleton_ of a complex consists of its vertices
     (0-simplices), the _1-skeleton_ additionally the edges between
     pairs of vertices (1-simplices), and the _2-skeleton_ additionally
     faces among triples of vertices (2-simplices).

_L_a_y_e_r_s:

     ‘geom_face()’ is a convenience geom that is equivalent to
     ‘geom_polygon()’ except that its default aesthetics are more
     appropriate for the overlapping elements produced by the stat
     layers.

     Given ‘x’ and ‘y’ coordinates, ‘stat_vietoris1()’ encodes the
     edges of the Vietoris complex using ‘x’, ‘y’, ‘xend’, and ‘yend’
     for ‘geom_segment()’, and ‘stat_vietoris2()’ encodes the faces
     using ‘x’, ‘y’, and ‘group’ for ‘geom_polygon()’. The edges of a
     Čech complex are exactly those of the Vietoris complex, so
     ‘stat_cech1()’ is an alias for ‘stat_vietoris1()’, while
     ‘stat_cech2()’ encodes the faces of the Čech complex in the same
     way as ‘stat_vietoris2()’ those of the Vietoris complex. Note that
     these stat layers encode only the simplices of fixed dimension; to
     render the 1- or 2-skeleton, they can be combined with
     ‘geom_vietoris0()’ or ‘geom_cech0()’, which are aliases for
     ‘ggplot2::stat_identity()’ that default to
     ‘ggplot2::geom_point()’.

_R_e_f_e_r_e_n_c_e_s:

     F Chazal and B Michel (2017) An introduction to Topological Data
     Analysis: fundamental and practical aspects for data scientists.
     <URL: https://arxiv.org/abs/1710.04019>

_S_e_e _A_l_s_o:

     ‘ggplot2::layer()’ for additional arguments.

_E_x_a_m_p_l_e_s:

     # function to generate noisy 2D circles
     make_noisy_circle <- function(n, sd = .01) {
       theta <- stats::runif(n = n, min = 0, max = 2*pi)
       cbind(x = cos(theta) + stats::rnorm(n, 0, sd),
             y = sin(theta) + stats::rnorm(n, 0, sd))
     }
     
     # generate a noisy 2D circle
     set.seed(1)
     d <- as.data.frame(make_noisy_circle(n = 40, sd = .15))
     r <- 1/3
     
     # plot balls beneath points
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_disk(radius = r, fill = "aquamarine3") +
       geom_point()
     
     # plot Vietoris 1-skeleton
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_vietoris1(diameter = 2*r, alpha = .25) +
       stat_vietoris0()
     
     # plot Vietoris 2-skeleton
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_vietoris2(diameter = 2*r, fill = "darkgoldenrod") +
       stat_vietoris1(diameter = 2*r, alpha = .25) +
       stat_vietoris0()
     
     # plot Čech 2-skeleton
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_cech2(diameter = 2*r, fill = "darkgoldenrod") +
       stat_cech1(diameter = 2*r, alpha = .25) +
       stat_cech0()
     
     # plot Vietoris 1-skeleton atop balls
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_disk(radius = r, fill = "aquamarine3") +
       stat_vietoris1(diameter = 2*r, size = .2) +
       stat_vietoris0(size = .3)
     
     # plot Vietoris 2-skeleton atop balls
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_disk(radius = r, fill = "aquamarine3") +
       stat_vietoris2(diameter = 2*r, fill = "darkgoldenrod") +
       stat_vietoris1(diameter = 2*r, size = .2) +
       stat_vietoris0(size = .3)
     
     # plot Čech 2-skeleton atop balls
     ggplot(d, aes(x = x, y = y)) +
       theme_bw() +
       coord_fixed() +
       stat_disk(radius = r, fill = "aquamarine3") +
       stat_cech2(diameter = 2*r, fill = "darkgoldenrod") +
       stat_cech1(diameter = 2*r, size = .2) +
       stat_cech0(size = .3)
     

